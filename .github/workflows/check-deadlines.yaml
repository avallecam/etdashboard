on:
  workflow_dispatch:
  schedule:
    - cron: '42 1 * * *'

name: check-deadlines

jobs:
  fetch-deadlines:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - uses: r-lib/actions/setup-renv@v2

      - name: Fetch deadlines for Epiverse-TRACE packages
        shell: Rscript {0}
        run: |
          et_cran_pkgs <- "https://epiverse-trace.r-universe.dev/api/packages/" |>
            jsonlite::fromJSON() |>
            dplyr::filter(
              `_registered`,
              `_cranurl`
            ) |>
            dplyr::pull(Package)

          crandb <- tools::CRAN_package_db()

          et_pkgs_deadline <- crandb |>
            dplyr::filter(
              Package %in% et_cran_pkgs,
              !is.na(Deadline)
            )

          issues <- gh::gh(
            "/repos/{owner}/{repo}/issues",
            owner = "epiverse-trace",
            repo = "etdashboard"
          ) |>
            purrr::map(\(x) x[c("title", "number")]) |>
            dplyr::bind_rows()

          et_pkgs_archiveable <- et_pkgs_deadline |>
            dplyr::left_join(issues, by = dplyr::join_by(Package == title))

          for (i in seq_len(nrow(et_pkgs_archiveable))) {
            pkg <- et_pkgs_archiveable$Package[i]
            deadline <- et_pkgs_archiveable$Deadline[i]
            issue <- et_pkgs_archiveable$number[i]
            gh::gh(
              "PATCH /repos/{owner}/{repo}/issues/{issue_number}",
              owner = "epiverse-trace",
              repo = "etdashboard",
              state = "open"
              issue_number = issue
            )
            gh::gh(
              "POST /repos/{owner}/{repo}/issues/{issue_number}/comments",
              owner = "epiverse-trace",
              repo = "etdashboard",
              issue_number = issue
              body = glue::glue("Package {pkg} is at risk to be archived by {deadline}.")
            )
          }


